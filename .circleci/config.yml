# Borrowed from https://github.com/sfackler/rust-postgres/blob/04bd98e7edb238511661b311c725a176012bca6a/.circleci/config.yml
# Used under MIT license.

restore_registry: &RESTORE_REGISTRY
  restore_cache:
    key: registry
save_registry: &SAVE_REGISTRY
  save_cache:
    key: registry-{{ .BuildNum }}
    paths:
    - /usr/local/cargo/registry/index

version: 2.1
jobs:
  buildtest:
    docker:
      - image: cimg/rust:1.84.1
        environment:
          RUSTFLAGS: -D warnings
          MERGE_BASE: main
          RABBITMQ_MANAGEMENT_URL: http://guest:guest@localhost:15672/
          RABBITMQ_URL: amqp://127.0.0.1:5672/
    steps:
      - setup_remote_docker
      - run:
          command: docker run --name rabbitmq --publish 61613:61613 rabbitmq:3.12.12-management
          background: true
      - checkout
      - run: |
              upstream=${CIRCLE_REPOSITORY_URL:-$(git remote  get-url origin)}
              git config --global user.email "circleci@invalid.example"
              git config --global user.name "CircleCI build for ${upstream}"
              echo "Merging with: ${MERGE_BASE}"
              git merge --no-edit --no-ff "origin/${MERGE_BASE}"
      - run: rustup component add rustfmt
      - run: rustfmt --version
      - run: cargo fmt -- --check
      - run: ./bin/ci-install-nextest
      - *RESTORE_REGISTRY
      - run: rustc --version | tee ~/rust-version
      - run: cargo build --all --tests --features end-to-end
      - *SAVE_REGISTRY
      - run: cargo nextest run --all

      - run: until docker exec --user rabbitmq rabbitmq rabbitmq-diagnostics -q check_running; do sleep 1; done
      - run: docker ps -a
      - run: docker exec rabbitmq rabbitmq-plugins enable rabbitmq_stomp
      - run: until docker exec --user rabbitmq rabbitmq rabbitmq-diagnostics -q check_running; do sleep 1; done

      - run: |
          set -euxo pipefail
          STOMP_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' rabbitmq)
          export STOMP_ADDRESS="${STOMP_IP}:61613"
          cargo nextest run --all --features end-to-end --test zzz_end_to_end

workflows:
  testall:
    jobs:
      - buildtest
